#
# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons, Josef Kircher
# Licensed under the MIT license. See LICENSE file in the project root for details.
#

import Pkg;
Pkg.develop(path = joinpath(@__DIR__, "../../FMI.jl"));
using Plots, JLD2, DataFrames, CSV, MAT # need to be loaded, as they enable optional features in FMI.jl
using FMI, FMIBase, FMIImport, FMICore, FMIExport
using Documenter
using Documenter: GitHubActions
using Suppressor

example_pages = [
    "Overview" => joinpath("examples", "overview.md"),
    "Simulate" => joinpath("examples", "simulate.md"),
    "Parameterize" => joinpath("examples", "parameterize.md"),
    "Inputs" => joinpath("examples", "inputs.md"),
    "Multiple instances" => joinpath("examples", "multiple_instances.md"),
    "Modelica conference 2021" => joinpath("examples", "modelica_conference_2021.md"),
    "Manipulation" => joinpath("examples", "manipulation.md"),
    "Multithreading" => joinpath("examples", "multithreading.md"),
    "Multiprocessing" => joinpath("examples", "multiprocessing.md"),
    "Pluto Workshops" => joinpath("examples", "workshops.md"),
    "FMIExport Examples" => [
        "Export Bouncing Ball" =>
            joinpath("examples", "fmiexport_examples", "Export.md"),
    ],
]

function recursive_second(vec)
    s = []
    for e in vec
        if typeof(e[2]) == String
            push!(s, e[2])
        else
            append!(s, recursive_second(e[2]))
        end
    end
    return s
end
function recursive_second_filter!(f, a)
    deleteat = []
    for i in keys(a)
        if typeof(a[i][2]) == String
            if f(a[i]) == false
                push!(deleteat, i)
            end
        else
            recursive_second_filter!(f, a[i][2])
            if length(a[i][2]) == 0
                push!(deleteat, i)
            end
        end
    end
    deleteat!(a, deleteat)
    return a
end
mdFilesInExampleDir = filter(
    f -> endswith(f, ".md"),
    collect(
        Iterators.flatten([
            (length(item[3]) > 0) ? [joinpath(item[1], f) for f in item[3]] : [] for
            item in walkdir(joinpath("docs", "src", "examples"))
        ]),
    ),
)
#check if all md files in examples are included in docs
for md in mdFilesInExampleDir
    if !occursin("README", md) &&
       all([!endswith(md, file) for file in recursive_second(example_pages)])
        print(
            string(
                "::warning title=Example-Warning::example \"",
                md,
                "\" is not included in the doc-manual\r\n",
            ),
        )
    end
end

#remove any example pages, for witch the example can not be found
# and remove svgs if md building failed
for md in recursive_second(example_pages)
    # check if file is missing
    if !(any([occursin(md, file) for file in mdFilesInExampleDir]))
        print(
            string(
                "::warning title=Example-Warning::example-page \"",
                md,
                "\" is to be included in the doc-manual, but could not be found on the examples branch or in \"docs/src/examples\"\r\n",
            ),
        )
        println(md)
        recursive_second_filter!(e -> e[2] â‰  md, example_pages)
    else
        # removal of svgs is here if there is xml data in the md
        r = open(joinpath("docs", "src", md), "r")
        s = read(r, String)
        close(r)
        if occursin("<svg", s) && occursin("</svg>", s)
            print(
                string(
                    "::warning title=SVG-Warning::example-page \"",
                    md,
                    "\" has svg-xml text in it. Most likely, linking of support-files generated by jupyter is broken. The svg-xml text has been removed for the doc-manual, but also no plot will be displayed\r\n",
                ),
            )
            # regex replace exeeds stack limit: s = replace(s, r"\<\?xml(?!<\/svg>)(.|\n)*?<\/svg>" => "")
            # so take iterative approach:
            while occursin("<?xml", s) && occursin("</svg>", s)
                a = findfirst("<?xml", s)[1] - 1
                b = findfirst("</svg>", s)[end] + 1
                s = string(s[1:a], s[b:end])
            end
            w = open(joinpath("docs", "src", md * "tmp"), "w+")
            write(w, s)
            close(w)
        end
        if isfile(joinpath("docs", "src", md * "tmp"))
            mv(
                joinpath("docs", "src", md * "tmp"),
                joinpath("docs", "src", md),
                force = true,
            )
        end
    end
end

my_makedocs() = makedocs(
    sitename = "FMI.jl",
    format = Documenter.HTML(
        collapselevel = 1,
        sidebar_sitename = false,
        edit_link = nothing,
        size_threshold = 512000,
        size_threshold_ignore = [
            "deprecated.md",
            "fmi2_lowlevel_library_functions.md",
            "fmi3_lowlevel_library_functions.md",
        ],
    ),
    modules = [FMI, FMIImport, FMIExport, FMICore, FMIBase],
    checkdocs = :exports,
    linkcheck = true,
    warnonly = :linkcheck,
    pages = Any[
        "Introduction" => "index.md"
        "Features" => "features.md"
        "FAQ" => "faq.md"
        "Examples" => example_pages
        "User Level API - FMI.jl" => "library.md"
        "Developer Level API" => Any[
            "fmi version independent content"=>Any[
                "fmi_lowlevel_library_constants.md",
                "fmi_lowlevel_modeldescription_functions.md",
                "fmi_lowlevel_library_functions.md",
            ],
            "FMI2 specific content"=>Any[
                "fmi2_lowlevel_library_constants.md",
                "FMI2 Functions in FMI Import/Core .jl"=>Any[
                    "fmi2_lowlevel_modeldescription_functions.md",
                    "fmi2_lowlevel_library_functions.md",
                    "fmi2_lowlevel_ME_functions.md",
                    "fmi2_lowlevel_CS_functions.md",
                ],
            ],
            "FMI3 specific content"=>Any[
                "fmi3_lowlevel_library_constants.md",
                "FMI3 Functions in FMI Import/Core .jl"=>Any[
                    "fmi3_lowlevel_modeldescription_functions.md",
                    "fmi3_lowlevel_library_functions.md",
                    "fmi3_lowlevel_ME_functions.md",
                    "fmi3_lowlevel_CS_functions.md",
                    "fmi3_lowlevel_SE_functions.md",
                ],
            ],
        ]
        "API Index" => "index_library.md"
        "FMI Tool Information" => "fmi-tool-info.md"
        "Related Publication" => "related.md"
        "Contents" => "contents.md"
        hide("Deprecated" => "deprecated.md")
    ],
)

function deployConfig()
    github_repository = get(ENV, "GITHUB_REPOSITORY", "")
    github_event_name = get(ENV, "GITHUB_EVENT_NAME", "")
    if github_event_name == "workflow_run" || github_event_name == "repository_dispatch"
        github_event_name = "push"
    end
    github_ref = get(ENV, "GITHUB_REF", "")
    return GitHubActions(github_repository, github_event_name, github_ref)
end

output = ""
try
    global output = @capture_err begin
        my_makedocs()
    end
catch e
    my_makedocs() # if it fails, re-run without capturing, so that its stderr appears in the console/logs
end

# errors = findall(r"Error:.*", output)
warns = findall(r"Warning:.*", output)

for w in warns
    s = string("::warning title=Documenter-Warning::", output[w], "\r\n")
    print(s)
end

deploydocs(
    repo = string("github.com/", get(ENV, "GITHUB_REPOSITORY", ""), "git"),
    devbranch = "main",
    deploy_config = deployConfig(),
)
